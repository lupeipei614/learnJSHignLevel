/**
 * padStart() 方法
 *  用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。
 *  从当前字符串的左侧开始填充。
 *  语法：str.padStart(targetLength[,padString])
 *      targetLength 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身
 *      padString 可选 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 " "
 *  返回值：在原字符串开头填充指定的填充字符串直到目标长度所形成的新字符串
 */

//如果省略第二个参数，则默认使用空字符串填充
console.log("abc".padStart(10)); //       abc
console.log("abc".padStart(10, "foo")); //foofoofabc
//如果填充字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断
console.log("abc".padStart(10, "123456789")); //1234567abc

//如果目标长度小于原始字符串的长度，则返回原字符串
console.log("123456789".padStart(5)); //123456789

//用处：处理身份证号
const num = "410721199006142323";
const num1 = num.slice(-4).padStart(num.length, "*");
console.log(num1); //**************2323

/**
 * padEnd()  方法
 *  会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。
 *  从当前字符串的末尾（右侧）开始填充。
 *  语法：str.padEnd(targetLength [, padString])
 *    targetLength
        当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。
      padString 可选
        填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 " "
 *  
 */

//如果省略第二个参数，则默认使用空字符串填充
console.log("abc".padEnd(10)); //abc
console.log("abc".padEnd(10, "foo")); //abcfoofoof
//如果填充字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断
console.log("abc".padEnd(10, "123456789")); //abc1234567

//如果目标长度小于原始字符串的长度，则返回原字符串
console.log("123456789".padEnd(5)); //123456789
